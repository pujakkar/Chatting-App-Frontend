import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'
import { server } from '../components/lib/server'


export const api=createApi({
    reducerPath:'api',
    baseQuery:fetchBaseQuery({baseUrl:`${server}/`}),

    tagTypes:['Chat','User','Message'],
    endpoints:(builder)=>({
        getChats:builder.query({
            query:()=>({
                url:'chat/myChats',
                credentials:'include',
            }),
            providesTags:['Chat'],
        }),
        searchUser:builder.query({
            query:(name)=>({
                url:`user/searchUser?name=${name}`,
                credentials:'include',
            }),
            providesTags:['User'],
        }),
        searchFriends:builder.query({
            query:(name)=>({
                url:`user/searchMyFriends?name=${name}`,
                credentials:'include',
            }),
            providesTags:['User'],
        }),
        sendReq:builder.mutation({
            query:(data)=>({
                url:'user/sendReq',
                method:'PUT',
                body:data,
                credentials:'include',
            }),
            invalidatesTags:['User'],
        }),
        getNotification:builder.query({
            query:()=>({
                url:'user/getNotifications',
                credentials:'include',
            }),
            keepUnusedDataFor:0,
        }),
        acceptReq:builder.mutation({
            query:(data)=>({
                url:'user/acceptReq',
                credentials:'include',
                method:'PUT',
                body:data,
            }),
            invalidatesTags:['Chat'],
        }),
        getMessagesQuery:builder.query({
            query:({chatId,page})=>({
                url:`chat/getMessage/${chatId}?page=${page}`,
                credentials:"include",
            }),
            keepUnusedDataFor:0,
        }),
        sendAttachmentsMut:builder.mutation({
            query:(data)=>({
                url:'chat/message',
                method:'PUT',
                credentials:'include',
                body:data,
            }),
            invalidatesTags:['User'],
        }),
        myGroups:builder.query({
            query:()=>({
                url:`chat/myGroups`,
                credentials:'include',
            }),
            providesTags:['Chat']
        }),
        getFriends:builder.query({
            query:()=>({
                url:'user/myFriends',
                credentials:'include',
            }),
            providesTags:['Chat'],
        }),
        createGroup:builder.mutation({
            query:(data)=>({
                url:'chat/newGroup',
                credentials:'include',
                method:'POST',
                body:data,
            }),
            invalidatesTags:['Chat']  //inavlidte tag is used so that as soon as the group is created it is fetched in chatlist , means no caching of old data
        }),
        renameGroup:builder.mutation({
            query:(data)=>({
                url:`chat/${data.chatId}`,
                credentials:'include',
                method:'PUT',
                body:data,
            }),
            invalidatesTags:['Chat']
        }),
        removeFromGroup:builder.mutation({
            query:(data)=>({
                url:'chat/removeChats',
                credentials:'include',
                method:'PUT',
                body:data,
            }),
            invalidatesTags:['Chat']
        }),
        getChatDetails:builder.query({
            query:(data)=>({
                url:`chat/${data.chatId}`,
                credentials:'include'
            }),
            providesTags:['Chat']
        }),
        addInGroup:builder.mutation({
            query:(data)=>({
                url:'chat/addChats',
                credentials:'include',
                method:'PUT',
                body:data,
            }),
            invalidatesTags:['Chat']
        }),
        deleteChat:builder.mutation({
            query:(data)=>({
                url:`chat/${data.chatId}`,
                credentials:'include',
                method:'DELETE',
            }),
            invalidatesTags:['Chat'],
        }),
        getUserProfile:builder.query({
            query:()=>({
                url:'user/userProfile',
                credentials:'include',
            }),
            providesTags:['User']
        }),
        leaveGroupChat:builder.mutation({
            query:(data)=>({
                url:`chat/leave/${data.chatId}`,
                credentials:'include',
                method:'DELETE',
            }),
            invalidatesTags:['Chat']
        }),
    })
})
export const {
    useGetChatsQuery,
    useLazySearchUserQuery,
    useSendReqMutation,
    useGetNotificationQuery,
    useAcceptReqMutation,
    useGetMessagesQueryQuery,
    useSendAttachmentsMutMutation,
    useMyGroupsQuery,
    useGetFriendsQuery,
    useCreateGroupMutation,
    useRenameGroupMutation,
    useRemoveFromGroupMutation,
    useGetChatDetailsQuery,
    useAddInGroupMutation,
    useDeleteChatMutation,
    useGetUserProfileQuery,
    useLeaveGroupChatMutation,
    useLazySearchFriendsQuery,
  } = api;